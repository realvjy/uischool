{"version":3,"sources":["webpack:///./src/pages/indexx.js","webpack:///./node_modules/core-js/modules/es6.string.link.js","webpack:///./node_modules/core-js/modules/_string-html.js"],"names":["BlogIndex","render","data","this","props","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","location","className","src","href","map","node","frontmatter","fields","slug","key","tags","tag","link","target","author","time","source","React","Component","pageQuery","createHTML","url","$export","fails","defined","quot","string","attribute","value","S","String","p1","replace","module","exports","NAME","exec","O","P","F","test","toLowerCase","split","length"],"mappings":"oMAMMA,E,gLACJC,OAAA,WAAU,IACAC,EAASC,KAAKC,MAAdF,KACFG,EAAYH,EAAKI,KAAKC,aAAaC,MACnCC,EAAQP,EAAKQ,kBAAkBC,MAErC,OACE,kBAAC,IAAD,CAAQC,SAAUT,KAAKC,MAAMQ,SAAUJ,MAAOH,GAC5C,kBAAC,IAAD,CAAKG,MAAM,cACX,4BAAQK,UAAU,gBAClB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,gBACb,yBAAKC,IAAI,cACT,6EACA,yBAAKD,UAAU,QACb,4CACA,uBAAGE,KAAK,YAAR,oBAKN,yBAAKF,UAAU,2BACb,8CAEDJ,EAAMO,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACNT,EAAQS,EAAKC,YAAYV,OAASS,EAAKE,OAAOC,KACpD,OACE,oCACE,6BAASP,UAAU,oBACjB,yBAAKA,UAAU,aAEb,6BAASQ,IAAKJ,EAAKE,OAAOC,MACxB,yBAAKP,UAAU,eACb,wBAAIA,UAAU,YACbI,EAAKC,YAAYI,KAAKN,KAAI,SAAAO,GAAG,OAC5B,wBAAIF,IAAKE,GACJA,OAIP,uBAAGR,KAAME,EAAKC,YAAYM,KAAMC,OAAO,WACrC,4BACGjB,GAEH,yBAAKK,UAAU,aACb,yBAAKA,UAAU,UACb,sCAAW,gCAASI,EAAKC,YAAYQ,SADvC,MAC+D,4BAAKT,EAAKC,YAAYS,OAErF,yBAAKd,UAAU,UACb,yBAAKC,IAAI,gBAAgBG,EAAKC,YAAYU,oB,GAjD9CC,IAAMC,WAiEf9B,YAER,IAAM+B,EAAS,c,iCCvEtB,EAAQ,IAAR,CAA0B,QAAQ,SAAUC,GAC1C,OAAO,SAAcC,GACnB,OAAOD,EAAW7B,KAAM,IAAK,OAAQ8B,Q,oBCJzC,IAAIC,EAAU,EAAQ,GAClBC,EAAQ,EAAQ,GAChBC,EAAU,EAAQ,IAClBC,EAAO,KAEPL,EAAa,SAAUM,EAAQf,EAAKgB,EAAWC,GACjD,IAAIC,EAAIC,OAAON,EAAQE,IACnBK,EAAK,IAAMpB,EAEf,MADkB,KAAdgB,IAAkBI,GAAM,IAAMJ,EAAY,KAAOG,OAAOF,GAAOI,QAAQP,EAAM,UAAY,KACtFM,EAAK,IAAMF,EAAI,KAAOlB,EAAM,KAErCsB,EAAOC,QAAU,SAAUC,EAAMC,GAC/B,IAAIC,EAAI,GACRA,EAAEF,GAAQC,EAAKhB,GACfE,EAAQA,EAAQgB,EAAIhB,EAAQiB,EAAIhB,GAAM,WACpC,IAAIiB,EAAO,GAAGL,GAAM,KACpB,OAAOK,IAASA,EAAKC,eAAiBD,EAAKE,MAAM,KAAKC,OAAS,KAC7D,SAAUN","file":"component---src-pages-indexx-js-8c9e80ef0d00beb8d888.js","sourcesContent":["import React from \"react\"\nimport { Link, useStaticQuery, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMarkdownRemark.edges\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title=\"All posts\" />\n        <header className=\"hero_section\">\n        <div className=\"container\">\n          <div className=\"hero_details\">\n            <img src=\"/logo.svg\"/>\n            <h1>We are creating the next generation designers</h1>\n            <div className=\"form\">\n              <h3>Comming Soon</h3>\n              <a href=\"/curator\">Curator List</a>\n            </div>\n          </div>\n        </div>\n        </header>\n        <div className=\"container featured_head\">\n          <h1>Featured Read</h1>\n        </div>\n        {posts.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug\n          return (\n            <>\n              <section className=\"featured_section\">\n                <div className=\"container\">\n\n                  <article key={node.fields.slug}>\n                    <div className=\"article_box\">\n                      <ul className=\"tag_list\">\n                      {node.frontmatter.tags.map(tag => (\n                        <li key={tag}>\n                            {tag}\n                        </li>\n                      ))}\n                      </ul>\n                      <a href={node.frontmatter.link} target=\"__blank\">\n                        <h2>\n                          {title}\n                        </h2>\n                        <div className=\"meta_info\">\n                          <div className=\"credit\">\n                            <h4>Author <strong>{node.frontmatter.author}</strong></h4> â€¢ <h4>{node.frontmatter.time}</h4>\n                          </div>\n                          <div className=\"source\">\n                            <img src=\"/anchor.svg\"/>{node.frontmatter.source}\n                          </div>\n                        </div>\n                      </a>\n                      </div>\n                  </article>\n                </div>\n              </section>\n            </>\n          )\n        })}\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            author\n            source\n            category\n            link\n            tags\n            time\n          }\n        }\n      }\n    }\n  }\n`\n","'use strict';\n// B.2.3.10 String.prototype.link(url)\nrequire('./_string-html')('link', function (createHTML) {\n  return function link(url) {\n    return createHTML(this, 'a', 'href', url);\n  };\n});\n","var $export = require('./_export');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar quot = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function (NAME, exec) {\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function () {\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n"],"sourceRoot":""}